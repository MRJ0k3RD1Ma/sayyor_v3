<?php

namespace app\modules\region\controllers;

use client\models\search\FoodRegistrationSearch;
use client\models\search\SampleRegistrationSearch;
use client\models\search\SertificatesSearch;
use common\models\Animals;
use common\models\Animaltype;
use common\models\CompositeSamples;
use common\models\DestructionSampleAnimal;
use common\models\DestructionSampleFood;
use common\models\Emlash;
use common\models\FoodRegistration;
use common\models\FoodSamples;
use common\models\FoodSamplingCertificate;
use common\models\Individuals;
use common\models\LegalEntities;
use common\models\LoginForm;
use common\models\Organizations;
use common\models\ProductExpertise;
use common\models\ReportAnimal;
use common\models\ReportDrugs;
use common\models\ReportFood;
use common\models\ResultAnimal;
use common\models\ResultFood;
use common\models\RouteSert;
use common\models\SampleRegistration;
use common\models\Samples;
use common\models\search\FoodSamplingCertificateSearch;
use common\models\search\ReportAnimalSearch;
use common\models\search\ReportDrugsSearch;
use common\models\search\ReportFoodSearch;
use common\models\search\SoatoSearch;
use common\models\Sertificates;
use common\models\SertStatus;
use common\models\Soato;
use common\models\Vaccination;
use common\models\Vet4;
use common\models\VetSites;
use kartik\mpdf\Pdf;
use Mpdf\MpdfException;
use PhpOffice\PhpSpreadsheet\Cell\DataType;
use PhpOffice\PhpSpreadsheet\Helper\Sample;
use PhpOffice\PhpSpreadsheet\Spreadsheet;
use PhpOffice\PhpSpreadsheet\Writer\Xlsx;
use setasign\Fpdi\PdfParser\CrossReference\CrossReferenceException;
use setasign\Fpdi\PdfParser\PdfParserException;
use setasign\Fpdi\PdfParser\Type\PdfTypeException;
use Yii;
use yii\base\BaseObject;
use yii\base\InvalidConfigException;
use yii\filters\AccessControl;
use yii\filters\VerbFilter;
use yii\helpers\ArrayHelper;
use yii\helpers\FileHelper;
use yii\helpers\Html;
use yii\helpers\VarDumper;
use yii\web\Controller;
use yii\web\NotFoundHttpException;
use yii\web\Response;

/**
 * Site controller
 */
class DefaultController extends Controller
{
    /**
     * {@inheritdoc}
     */
    public function behaviors()
    {
        return [
            'access' => [
                'class' => AccessControl::className(),
                'rules' => [
                    [
                        'allow' => true,
                        'roles' => ['@'],
                    ],
                ],
            ],
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'logout' => ['POST'],
                ],
            ],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function actions()
    {
        return [
            'error' => [
                'class' => 'yii\web\ErrorAction',
            ],
            'captcha' => [
                'class' => 'yii\captcha\CaptchaAction',
                'fixedVerifyCode' => YII_ENV_TEST ? 'testme' : null,
            ],
        ];
    }

    public function beforeAction($action)
    {

//        var_dump($action->id) or die();
        if ($action->id != 'login' and Yii::$app->user->isGuest) {
            header('Location: /region/login');
            exit;
        }

        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    function actionListanimal(int $export = null)
    {

        $searchModel = new SertificatesSearch();
        $dataProvider = $searchModel->searchRegion($this->request->queryParams);
        if ($export == 1) {
            $searchModel->exportToExcel($dataProvider->query);
        } elseif ($export == 2) {
            Yii::$app->response->format = \yii\web\Response::FORMAT_RAW;

            $pdf = new Pdf([
                'mode' => Pdf::MODE_UTF8, // leaner size using standard fonts
                'destination' => Pdf::DEST_BROWSER,
                'content' => $this->renderPartial('_pdfanimal', ['dataProvider' => $dataProvider]),
                'options' => [
                ],
                'methods' => [
                    'SetTitle' => $searchModel::tableName(),
                    'SetHeader' => [$searchModel::tableName() . '|| ' . date("r")],
                    'SetFooter' => ['| {PAGENO} |'],
                    'SetAuthor' => '@QalandarDev',
                    'SetCreator' => '@QalandarDev',
                ]
            ]);
            try {
                return $pdf->render();
            } catch (MpdfException $e) {
                return $e;
            } catch (CrossReferenceException $e) {
                return $e;
            } catch (PdfTypeException $e) {
                return $e;
            } catch (PdfParserException $e) {
                return $e;
            } catch (InvalidConfigException $e) {
                return $e;
            }
        }
        return $this->render('listanimal', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);

    }


    /**
     * Displays homepage.
     *
     * @return mixed
     */
    public
    function actionIndex()
    {
        return $this->render('index');
    }

    public function actionCreate($type = null)
    {
        if ($type) {
            return $this->redirect(['/default/' . $type]);
        }
        return $this->render('create');
    }

    public function actionAnimal()
    {
        $model = new Sertificates();
        $legal = Individuals::findOne(['pnfl' => Yii::$app->session->get('doc_pnfl')]);
        $model->sert_date = date('Y-m-d');
        $model->ownertype = 1;
        $owner_leg = new LegalEntities();
        $owner_ind = new Individuals();
        $model->status_id = 0;
        if ($model->load(Yii::$app->request->post())) {

            $num = Sertificates::find()->filterWhere(['like', 'sert_date', date('Y')])->max('sert_id');
            $vet = VetSites::findOne($model->vet_site_id);
            $code = $vet->soato0->region_id . $vet->soato0->district_id . '-' . substr(date('Y'), 2, 2) . '-';

            $num = $num + 1;
            $code .= $num;
            $model->sert_id = "$num";
            $model->pnfl = $legal->pnfl;
            $model->sert_full = $code;
            $model->sert_num = "{$model->sert_num}";

            if ($model->ownertype == 1) {
                if ($owner_ind->load(Yii::$app->request->post())) {
                    if ($own = Individuals::findOne(['pnfl' => $owner_ind->pnfl])) {
                        $owner_ind = $own;
                    } else {
                        $owner_ind->save();
                    }
                    $model->owner_pnfl = $owner_ind->pnfl;
                } else {
                    Yii::$app->session->setFlash('error', Yii::t('client', 'Ma\'lumotlarni to\'ldirishda xatolik'));
                }
            } elseif ($model->ownertype == 2) {
                if ($owner_leg->load(Yii::$app->request->post())) {
                    if ($own = LegalEntities::findOne(['inn' => $owner_leg->inn])) {
                        $owner_leg = $own;
                    } else {
                        $owner_leg->save();
                    }
                    $model->owner_inn = $owner_leg->inn;
                } else {
                    Yii::$app->session->setFlash('error', Yii::t('client', 'Ma\'lumotlarni to\'ldirishda xatolik'));
                }
            } else {
                Yii::$app->session->setFlash('error', Yii::t('client', 'Ma\'lumotlarni to\'ldirishda xatolik'));
                return $this->render('animal', [
                    'model' => $model,
                    'legal' => $owner_leg,
                    'default' => $owner_ind
                ]);
            }


            if ($model->save()) {
                Yii::$app->session->setFlash('success', 'Proba tekshiruvchi tashkilotga muvoffaqtiyatli yuborildi');
                return $this->redirect(['view', 'id' => $model->id]);
            } else {
                Yii::$app->session->setFlash('error', 'Ma\'lumotlarni to\'ldirishda xatolik yuzaga keldi');
            }
        }

        return $this->render('animal', [
            'model' => $model,
            'legal' => $owner_leg,
            'default' => $owner_ind
        ]);
    }

    public
    function actionViewanimal($id)
    {
        return $this->render('viewanimal', [
            'model' => $this->findModel($id),
        ]);
    }


    public
    function actionSend($id)
    {
        $model = Sertificates::findOne($id);
        $sample = Samples::find()->where(['samples.sert_id' => $id])->andWhere(['not in', 'samples.id', 'select cs.sample_id from composite_samples cs where samples.id=cs.sample_id'])->all();
        $reg = new SampleRegistration();
        $reg->pnfl = Yii::$app->session->get('doc_pnfl');
        $reg->pnfl = "{$reg->pnfl}";
        $reg->reg_date = date('Y-m-d');

        if ($reg->load(Yii::$app->request->post())) {

            $num = SampleRegistration::find()->filterWhere(['like', 'reg_date', date('Y')])->max('code_id');
            $reg->pnfl = Yii::$app->session->get('doc_pnfl');
            $reg->pnfl = "{$reg->pnfl}";
            $code = substr(date('Y'), 2, 2) . '-1-' . get3num($reg->organization_id) . '-';
            $reg->status_id = 1;
            $num = $num + 1;
            $code .= $num;
            $reg->code = $code;
            $reg->code_id = $num;

            if (is_array($reg->composite) and count($reg->composite) > 0) {
                if ($reg->save()) {
                    foreach ($reg->composite as $item) {
                        $com = new CompositeSamples();
                        $com->status_id = 1;
                        $com->sample_id = $item;
                        $com->registration_id = $reg->id;
                        $com->save();
                        $sam = Samples::findOne($com->sample_id);
                        $sam->status_id = 1;
                        $sam->save();
                        $sam = null;
                        $com = null;

                    }
                }
                $model->status_id = 1;
                $model->save();
                return $this->redirect(['view', 'id' => $model->id]);
            } else {
                Yii::$app->session->setFlash('error', Yii::t('client', 'Namuna tanlanmagan'));
            }

        }
        return $this->render('send', [
            'sample' => $sample,
            'model' => $model,
            'reg' => $reg
        ]);
    }

    public
    function actionAdd($id)
    {

        $model = $this->findModel($id);

        $animal = new Animals();
        $sample = new Samples();

        $animal->pnfl = Yii::$app->session->get('doc_pnfl');
        $sample->animal_id = -1;

        $sample->sert_id = intval($id);

        if (Yii::$app->request->isPost) {

            if ($animal->load(Yii::$app->request->post())) {
                $num = Samples::find()->filterWhere(['like', 'kod', $model->sert_full])->max('samp_id');

                $code = $model->sert_full;

                $num = $num + 1;
                $code .= $num;
                $sample->kod = $code . '/' . $num;
                $sample->samp_id = $num;
                $animal->inn = "{$animal->inn}";

                if ($animal->save() and $sample->load(Yii::$app->request->post())) {
                    $sample->animal_id = $animal->id;
                    $sample->sert_id = intval($id);
                    if ($sample->save(false)) {
                        Yii::$app->session->setFlash('success', Yii::t('client', 'Namuna muvoffaqiyatli saqlandi'));
                        return $this->redirect(['view', 'id' => $id]);
                    } else {
                        Yii::$app->session->setFlash('error', 'Maydonlar to\'ldirimlagan');
                    }
                }
            }

        }

        return $this->render('add', [
            'model' => $model,
            'animal' => $animal,
            'sample' => $sample,
        ]);
    }

    protected
    function findModel($id)
    {
        if (($model = Sertificates::findOne($id)) !== null) {
            return $model;
        }

        throw new NotFoundHttpException(Yii::t('cp.sertificates', 'The requested page does not exist.'));
    }

    public
    function actionVaccination($id, $sert_id)
    {

        $model = new Vaccination();
        $model->animal_id = $id;
        $animal = Animals::findOne($id);
        if ($model->load(Yii::$app->request->post()) and $model->save()) {
            return $this->redirect(['view', 'id' => $sert_id]);
        }
        return $this->render('vaccination', ['model' => $model, 'animal' => $animal]);
    }

    public
    function actionEmlash($id, $sert_id)
    {

        $model = new Emlash();
        $model->animal_id = $id;
        $animal = Animals::findOne($id);
        if ($model->load(Yii::$app->request->post()) and $model->save()) {
            return $this->redirect(['view', 'id' => $sert_id]);
        }
        return $this->render('emlash', ['model' => $model, 'animal' => $animal]);

    }


    public
    function actionProduct()
    {
        $model = new FoodSamplingCertificate();
        $pro = new ProductExpertise();
        $model->pnfl = Yii::$app->session->get('doc_pnfl');
        if ($model->load(Yii::$app->request->post())) {

//            $org = $model->organization_id;
//
//            $num = FoodSamplingCertificate::find()->where(['organization_id'=>$org])->andFilterWhere(['like','food_id',date('Y')])->max('food_id');

//            $code = substr(date('Y'),2,2).'-2-'.get3num($org).'-';

//            $num = $num+1;
//            $code .= $num;
//            $model->kod = $code;
//            $model->food_id = $num;
//            $pro->orgaization_id = $model->organization_id;
            $num = FoodSamplingCertificate::find()->filterWhere(['like', 'sampling_date', date('Y')])->max('id');
            $vet = VetSites::findOne($model->sampling_site);
            $code = $vet->soato0->region_id . $vet->soato0->district_id . '-' . substr(date('Y'), 2, 2) . '-';

            $num = $num + 1;
            $code .= $num;
            $model->code = "$num";
//            var_dump($model->code) or die();
            $pro->pnfl = $model->pnfl;
            $pro->vet_site_id = $model->sampling_site;
            if ($model->save() and $pro->load(Yii::$app->request->post())) {
                $pro->food_sampling_certificate = $model->id;
                $pro->save();
                return $this->redirect(['viewfood', 'id' => $model->id]);
            }
        }
        return $this->render('product', ['model' => $model, 'pro' => $pro]);
    }

    public
    function actionViewfood($id)
    {
        $model = FoodSamplingCertificate::findOne($id);
        return $this->render('viewfood', [
            'model' => $model
        ]);
    }

    public function actionListfood(int $export = null)
    {
        $searchModel = new FoodSamplingCertificateSearch();
        $dataProvider = $searchModel->searchRegion($this->request->queryParams);

        if ($export == 1) {
            $searchModel->exportToExcel($dataProvider->query);
        } elseif ($export == 2) {
            Yii::$app->response->format = \yii\web\Response::FORMAT_RAW;

            $pdf = new Pdf([
                'mode' => Pdf::MODE_UTF8, // leaner size using standard fonts
                'destination' => Pdf::DEST_BROWSER,
                'content' => $this->renderPartial('_pdflistfood', ['dataProvider' => $dataProvider]),
                'options' => [
                ],
                'methods' => [
                    'SetTitle' => $searchModel::tableName(),
                    'SetHeader' => [$searchModel::tableName() . '|| ' . date("r")],
                    'SetFooter' => ['| {PAGENO} |'],
                    'SetAuthor' => '@QalandarDev',
                    'SetCreator' => '@QalandarDev',
                ]
            ]);
            try {
                return $pdf->render();
            } catch (MpdfException $e) {
                return $e;
            } catch (CrossReferenceException $e) {
                return $e;
            } catch (PdfTypeException $e) {
                return $e;
            } catch (PdfParserException $e) {
                return $e;
            } catch (InvalidConfigException $e) {
                return $e;
            }
        }
        return $this->render('listfood', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    public
    function actionSertapp(int $export = null)
    {
        $searchModel = new SampleRegistrationSearch();
        $dataProvider = $searchModel->searchregion($this->request->queryParams);
        if ($export == 1) {
            $searchModel->exportToExcel($dataProvider->query);
        } elseif ($export == 2) {
            Yii::$app->response->format = \yii\web\Response::FORMAT_RAW;

            $pdf = new Pdf([
                'mode' => Pdf::MODE_UTF8, // leaner size using standard fonts
                'destination' => Pdf::DEST_BROWSER,
                'content' => $this->renderPartial('_pdflistsert', ['dataProvider' => $dataProvider]),
                'options' => [
                ],
                'methods' => [
                    'SetTitle' => $searchModel::tableName(),
                    'SetHeader' => [$searchModel::tableName() . '|| ' . date("r")],
                    'SetFooter' => ['| {PAGENO} |'],
                    'SetAuthor' => '@QalandarDev',
                    'SetCreator' => '@QalandarDev',
                ]
            ]);
            try {
                return $pdf->render();
            } catch (MpdfException $e) {
                return $e;
            } catch (CrossReferenceException $e) {
                return $e;
            } catch (PdfTypeException $e) {
                return $e;
            } catch (PdfParserException $e) {
                return $e;
            } catch (InvalidConfigException $e) {
                return $e;
            }
        }
        return $this->render('listsert', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    public
    function actionViewsert($id)
    {
        $model = SampleRegistration::findOne($id);
        $samples = Samples::find()->select(['samples.*'])
            ->innerJoin('composite_samples', 'composite_samples.sample_id = samples.id')
            ->where(['composite_samples.registration_id' => $id])->all();

        return $this->render('viewsert', [
            'model' => $model,
            'samples' => $samples
        ]);
    }

    public
    function actionLogin()
    {

//        echo "OK";
        $this->layout = "login";
//        if (!Yii::$app->user->isGuest) {
//            return $this->redirect(['/region/index']);
//        }

//        var_dump(Yii::$app->user->identity) or die();
        $model = new LoginForm();
        if ($model->load(Yii::$app->request->post()) && $model->login()) {
            return $this->redirect(['/region/']);
        }

        $model->password = '';

        return $this->render('login', [
            'model' => $model,
        ]);
    }

    public function actionLogout()
    {
        Yii::$app->user->logout();

        header('Location: /region/login');
        exit;
    }

    public function actionViewnamuna($id)
    {
        if ($this->request->isAjax) {
            return $this->renderAjax('viewnamuna', [
                'model' => Samples::find()->where(['id' => $id])->one(),
            ]);
        } else {
            return $this->render('viewnamuna', [
                'model' => Samples::find()->where(['id' => $id])->one()
            ]);
        }
    }

    public function actionReportanimal(int $export = null)
    {
        $searchModel = new ReportAnimalSearch();
        $dataProvider = $searchModel->searchSub($this->request->queryParams);
        if ($export == 1) {
            $searchModel->exportToExcel($dataProvider->query);
        } elseif ($export == 2) {
            Yii::$app->response->format = \yii\web\Response::FORMAT_RAW;

            $pdf = new Pdf([
                'mode' => Pdf::MODE_UTF8, // leaner size using standard fonts
                'destination' => Pdf::DEST_BROWSER,
                'content' => $this->renderPartial('_pdfreportanimal', ['dataProvider' => $dataProvider]),
                'options' => [
                ],
                'methods' => [
                    'SetTitle' => $searchModel::tableName(),
                    'SetHeader' => [$searchModel::tableName() . '|| ' . date("r")],
                    'SetFooter' => ['| {PAGENO} |'],
                    'SetAuthor' => '@QalandarDev',
                    'SetCreator' => '@QalandarDev',
                ]
            ]);
            try {
                return $pdf->render();
            } catch (MpdfException|CrossReferenceException|PdfTypeException|PdfParserException|InvalidConfigException $e) {
                return $e;
            }
        }
        return $this->render('reportanimal', [
            'model' => $searchModel,
            'dataProvider' => $dataProvider
        ]);
    }

    /**
     * Lists all ReportFood models.
     *
     * @return string
     */
    public function actionReportfood(int $export = null)
    {
        $searchModel = new ReportFoodSearch();
        $dataProvider = $searchModel->searchSub($this->request->queryParams);
        if ($export == 1) {
            $searchModel->exportToExcel($dataProvider->query);
        } elseif ($export == 2) {
            Yii::$app->response->format = \yii\web\Response::FORMAT_RAW;

            $pdf = new Pdf([
                'mode' => Pdf::MODE_UTF8, // leaner size using standard fonts
                'destination' => Pdf::DEST_BROWSER,
                'content' => $this->renderPartial('_pdfreportfood', ['dataProvider' => $dataProvider]),
                'options' => [
                ],
                'methods' => [
                    'SetTitle' => $searchModel::tableName(),
                    'SetHeader' => [$searchModel::tableName() . '|| ' . date("r")],
                    'SetFooter' => ['| {PAGENO} |'],
                    'SetAuthor' => '@QalandarDev',
                    'SetCreator' => '@QalandarDev',
                ]
            ]);
            try {
                return $pdf->render();
            } catch (MpdfException|CrossReferenceException|PdfTypeException|PdfParserException|InvalidConfigException $e) {
                return $e;
            }
        }
        return $this->render('reportfood', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    /**
     * Lists all ReportDrugs models.
     *
     * @return string
     */
    public function actionReportdrugs(int $export = null)
    {
        $searchModel = new ReportDrugsSearch();
        $dataProvider = $searchModel->searchSub($this->request->queryParams);
        if ($export == 1) {
            $searchModel->exportToExcel($dataProvider->query);
        } elseif ($export == 2) {
            Yii::$app->response->format = \yii\web\Response::FORMAT_RAW;

            $pdf = new Pdf([
                'mode' => Pdf::MODE_UTF8, // leaner size using standard fonts
                'destination' => Pdf::DEST_BROWSER,
                'content' => $this->renderPartial('_pdfreportdrugs', ['dataProvider' => $dataProvider]),
                'options' => [
                ],
                'methods' => [
                    'SetTitle' => $searchModel::tableName(),
                    'SetHeader' => [$searchModel::tableName() . '|| ' . date("r")],
                    'SetFooter' => ['| {PAGENO} |'],
                    'SetAuthor' => '@QalandarDev',
                    'SetCreator' => '@QalandarDev',
                ]
            ]);
            try {
                return $pdf->render();
            } catch (MpdfException|CrossReferenceException|PdfTypeException|PdfParserException|InvalidConfigException $e) {
                return $e;
            }
        }
        return $this->render('reportdrugs', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    public function actionReportanimalview($id)
    {
        return $this->render('reportanimalview', [
            'model' => ReportAnimal::findOne(['id' => $id]),
        ]);
    }

    public function actionReportfoodview($id)
    {
        return $this->render('reportfoodview', [
            'model' => ReportFood::findOne(['id' => $id]),
        ]);
    }

    public function actionReportdrugsview($id)
    {
        return $this->render('reportdrugsview', [
            'model' => ReportDrugs::findOne(['id' => $id]),
        ]);
    }

    public function actionStat($id = null)
    {
        $SoatoModel = new SoatoSearch();
        $SoatoDataProvider = $SoatoModel->ListRegions($id);

        $AnimalDataModel = new SertificatesSearch(); //Hayvon kasalliklari Dalolatnoma
        $AnimalDataProvider = $AnimalDataModel->searchregion($this->request->queryParams);
        $AnimalRegModel = new SampleRegistrationSearch(); //Hayvon Kasalliklari Ariza
        $AnimalRegProvider = $AnimalRegModel->searchregion($this->request->queryParams);
        $FoodDataModel = new FoodSamplingCertificateSearch(); //Oziq-ovqat ekspertizasi Dalolatnoma
        $FoodDataProvider = $FoodDataModel->search($this->request->queryParams);
        $FoodRegModel = new FoodRegistrationSearch(); //Oziq-ovqat arizalari
        $FoodRegProvider = $FoodRegModel->search($this->request->queryParams);
        return $this->render('stat', [
            'AnimalDataModel' => $AnimalDataModel,
            'AnimalDataProvider' => $AnimalDataProvider,
            'AnimalRegModel' => $AnimalRegModel,
            'AnimalRegProvider' => $AnimalRegProvider,
            'FoodDataModel' => $FoodDataModel,
            'FoodDataProvider' => $FoodDataProvider,
            'FoodRegModel' => $FoodRegModel,
            'FoodRegProvider' => $FoodRegProvider,
            'SoatoModel' => $SoatoModel,
            'SoatoDataProvider' => $SoatoDataProvider,
        ]);
    }

    public function actionStatRegfood($id = null)
    {
        $title="Oziq-ovqat ekspertizalari bo'yicha Arizalar statistikasi";
        $SoatoModel = new SoatoSearch();
        $SoatoDataProvider = $SoatoModel->ListRegions($id);
        $FoodRegModel = new FoodRegistrationSearch(); //Oziq-ovqat arizalari
        $FoodRegProvider = $FoodRegModel->search($this->request->queryParams);
        $status = ArrayHelper::map(SertStatus::find()->asArray()->all(), 'id', 'name_uz');
        $counter = array_fill(0, 14, array_fill(0, 7, 0));
        foreach ($SoatoDataProvider->getModels() as $key => $SoatoModel) {
            foreach ($FoodRegProvider->getModels() as $model) {
                if ($model->inn) {
                    $counter[$key][$model->status_id] += Yii::$app->request->get('id') ? ($model->inn0->soato->district_id == $SoatoModel->district_id) : ($model->inn0->soato->region_id == $SoatoModel->region_id);
                } elseif ($model->pnfl) {
                    $counter[$key][$model->status_id] += Yii::$app->request->get('id') ? ($model->pnfl0->soato->district_id == $SoatoModel->district_id) : ($model->pnfl0->soato->region_id == $SoatoModel->region_id);
                }
            }
        }
        return $this->render('stat-all', [
            'title'=>$title,
            'FoodRegProvider' => $FoodRegProvider,
            'SoatoDataProvider' => $SoatoDataProvider,
            'status' => $status,
            'counter' => $counter,

        ]);
    }

    public function actionStatAnimal($id = null)
    {
        $title="Hayvon kasalliklari bo'yicha Dalolatnomalar statistikasi";
        $SoatoModel = new SoatoSearch();
        $SoatoDataProvider = $SoatoModel->ListRegions($id);
        $AnimalDataModel = new SertificatesSearch(); //Hayvon kasalliklari Dalolatnoma
        $AnimalDataProvider = $AnimalDataModel->searchregion($this->request->queryParams);
        $status = ArrayHelper::map(SertStatus::find()->asArray()->all(), 'id', 'name_uz');
        $counter = array_fill(0, 14, array_fill(0, 7, 0));
        foreach ($SoatoDataProvider->getModels() as $key => $SoatoModel) {
            foreach ($AnimalDataProvider->getModels() as $model) {
                if ($model->inn) {
                    $counter[$key][$model->status_id] += Yii::$app->request->get('id') ? ($model->inn0->soato->district_id == $SoatoModel->district_id) : ($model->inn0->soato->region_id == $SoatoModel->region_id);
                } elseif ($model->pnfl) {
                    $counter[$key][$model->status_id] += Yii::$app->request->get('id') ? ($model->pnfl0->soato->district_id == $SoatoModel->district_id) : ($model->pnfl0->soato->region_id == $SoatoModel->region_id);
                }
            }
        }
        return $this->render('stat-all', [
            'title'=>$title,
            'SoatoDataProvider' => $SoatoDataProvider,
            'status' => $status,
            'counter' => $counter,

        ]);
    }

    public function actionStatFood($id = null)
    {
        $title="Oziq-ovqat ekspertizalari bo'yicha Dalolatnomalar statistikasi";
        $SoatoModel = new SoatoSearch();
        $SoatoDataProvider = $SoatoModel->ListRegions($id);
        $FoodDataModel = new FoodSamplingCertificateSearch(); //Oziq-ovqat ekspertizasi Dalolatnoma
        $FoodDataProvider = $FoodDataModel->search($this->request->queryParams);
        $status = ArrayHelper::map(SertStatus::find()->asArray()->all(), 'id', 'name_uz');
        $counter = array_fill(0, 14, array_fill(0, 7, 0));
        foreach ($SoatoDataProvider->getModels() as $key => $SoatoModel) {
            foreach ($FoodDataProvider->getModels() as $model) {
                if ($model->inn) {
                    $counter[$key][$model->status_id] += Yii::$app->request->get('id') ? ($model->inn0->soato->district_id == $SoatoModel->district_id) : ($model->inn0->soato->region_id == $SoatoModel->region_id);
                } elseif ($model->pnfl) {
                    $counter[$key][$model->status_id] += Yii::$app->request->get('id') ? ($model->pnfl0->soato->district_id == $SoatoModel->district_id) : ($model->pnfl0->soato->region_id == $SoatoModel->region_id);
                }
            }
        }
        return $this->render('stat-all', [
            'title'=>$title,
            'SoatoDataProvider' => $SoatoDataProvider,
            'status' => $status,
            'counter' => $counter,

        ]);
    }
    public function actionStatReganimal($id = null)
    {
        $title="Hayvon kasalliklari bo'yicha Arizalar statistikasi";
        $SoatoModel = new SoatoSearch();
        $SoatoDataProvider = $SoatoModel->ListRegions($id);
        $AnimalRegModel = new SampleRegistrationSearch(); //Hayvon Kasalliklari Ariza
        $AnimalRegProvider = $AnimalRegModel->searchregion($this->request->queryParams);
        $status = ArrayHelper::map(SertStatus::find()->asArray()->all(), 'id', 'name_uz');
        $counter = array_fill(0, 14, array_fill(0, 7, 0));
        foreach ($SoatoDataProvider->getModels() as $key => $SoatoModel) {
            foreach ($AnimalRegProvider->getModels() as $model) {
                if ($model->inn) {
                    $counter[$key][$model->status_id] += Yii::$app->request->get('id') ? ($model->inn0->soato->district_id == $SoatoModel->district_id) : ($model->inn0->soato->region_id == $SoatoModel->region_id);
                } elseif ($model->pnfl) {
                    $counter[$key][$model->status_id] += Yii::$app->request->get('id') ? ($model->pnfl0->soato->district_id == $SoatoModel->district_id) : ($model->pnfl0->soato->region_id == $SoatoModel->region_id);
                }
            }
        }
        return $this->render('stat-all', [
            'title'=>$title,
            'SoatoDataProvider' => $SoatoDataProvider,
            'status' => $status,
            'counter' => $counter,

        ]);
    }

    public function actionSertfood(int $export = null)
    {
        $searchModel = new FoodRegistrationSearch();
        $dataProvider = $searchModel->searchRegion($this->request->queryParams);
        if ($export == 1) {
            $searchModel->exportToExcel($dataProvider->query);
        } elseif ($export == 2) {
            Yii::$app->response->format = Response::FORMAT_RAW;

            $pdf = new Pdf([
                'mode' => Pdf::MODE_CORE, // leaner size using standard fonts
                'destination' => Pdf::DEST_BROWSER,
                'content' => $this->renderPartial('_pdfsertfood', ['dataProvider' => $dataProvider]),
                'options' => [
                ],
                'methods' => [
                    'SetTitle' => $searchModel::tableName(),
                    'SetHeader' => [$searchModel::tableName() . '|| ' . date("r")],
                    'SetFooter' => ['| {PAGENO} |'],
                    'SetAuthor' => '@QalandarDev',
                    'SetCreator' => '@QalandarDev',
                ]
            ]);
            try {
                return $pdf->render();
            } catch (MpdfException|CrossReferenceException|PdfTypeException|PdfParserException|InvalidConfigException $e) {
                return $e;
            }
        }
        return $this->render('sertfood', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    public function actionSertfoodview($id)
    {
        $model = FoodRegistration::findOne($id);
        $samples = FoodSamples::find()->select(['food_samples.*'])
            ->innerJoin('food_compose', 'food_compose.sample_id = food_samples.id')
            ->where(['food_compose.registration_id' => $id])->all();
        return $this->render('sertfoodview', [
            'model' => $model,
            'samp' => $samples
        ]);
    }

    public function actionPdfdest($id)
    {
        $model = DestructionSampleAnimal::findOne(['id' => $id]);
        $fileName = Yii::getAlias('@uploads') . "/../pdf/" . $model::tableName() . "_" . $model->id . ".pdf";
        header('Content-Disposition: attachment; name=' . $fileName);
        $file = fopen($fileName, 'r+');
        Yii::$app->response->sendFile($fileName, $model::tableName() . "_" . $model->id . ".pdf", ['inline' => false, 'mimeType' => 'application/pdf'])->send();

    }

    public function actionPdfdestfood($id)
    {
        $model = DestructionSampleFood::findOne(['id' => $id]);
        $fileName = Yii::getAlias('@uploads') . "/../pdf/" . $model::tableName() . "_" . $model->id . ".pdf";
        header('Content-Disposition: attachment; name=' . $fileName);
        $file = fopen($fileName, 'r+');
        Yii::$app->response->sendFile($fileName, $model::tableName() . "_" . $model->id . ".pdf", ['inline' => false, 'mimeType' => 'application/pdf'])->send();

    }

    public function actionAnimalPdf($id)
    {
        $model = Samples::findOne(['id' => $id]);
        $fileName = Yii::getAlias('@uploads') . "/../pdf/" . $model::tableName() . "_" . $model->id . ".pdf";
        header('Content-Disposition: attachment; name=' . $fileName);
        $file = fopen($fileName, 'r+');
        Yii::$app->response->sendFile($fileName, $model::tableName() . "_" . $model->id . ".pdf", ['inline' => false, 'mimeType' => 'application/pdf'])->send();
    }

    public function actionFoodPdf($id)
    {
        $model = FoodSamples::findOne(['id' => $id]);
        $fileName = Yii::getAlias('@uploads') . "/../pdf/" . $model::tableName() . "_" . $model->id . ".pdf";
        header('Content-Disposition: attachment; name=' . $fileName);
        $file = fopen($fileName, 'r+');
        Yii::$app->response->sendFile($fileName, $model::tableName() . "_" . $model->id . ".pdf", ['inline' => false, 'mimeType' => 'application/pdf'])->send();
    }



    public function actionReportvet4(){
        $model = new Vet4();
        $model->type = 0;
        if($model->load(Yii::$app->request->post())){


            $sql = 1;
            if($model->type == 0){
                $code = "17".Yii::$app->user->identity->empPosts->org->soato0->region_id;
                if($model->district > 0){
                    $code .= $model->district;
                }
                $sql = 'org_id in (select id from organizations where soato like "'.$code.'%")';

            }else{
                if($model->org > 0){
                    $sql = "org_id={$model->org}";
                }
            }
            $res = ResultAnimal::find()
                ->where('end_date is not null')
                ->andWhere(['>=','end_date',$model->date_to])
                ->andWhere(['<=','end_date',$model->date_do])
                ->andWhere($sql)
                ->all();

            $speadsheet = new Spreadsheet();

            $sheet = $speadsheet->getActiveSheet();
            $speadsheet->getActiveSheet()->getColumnDimension('A')->setWidth(10);
            $speadsheet->getActiveSheet()->getColumnDimension('B')->setWidth(30);
            $speadsheet->getActiveSheet()->getColumnDimension('C')->setWidth(30);
            $speadsheet->getActiveSheet()->getColumnDimension('D')->setWidth(12);
            $speadsheet->getActiveSheet()->getColumnDimension('E')->setWidth(12);
            $speadsheet->getActiveSheet()->getColumnDimension('F')->setWidth(12);
            $speadsheet->getActiveSheet()->getColumnDimension('G')->setWidth(12);
            $speadsheet->getActiveSheet()->getColumnDimension('H')->setWidth(12);
            $speadsheet->getActiveSheet()->getColumnDimension('I')->setWidth(12);
            $speadsheet->getActiveSheet()->getColumnDimension('J')->setWidth(12);
            $speadsheet->getActiveSheet()->getColumnDimension('K')->setWidth(12);
            $speadsheet->getActiveSheet()->getColumnDimension('L')->setWidth(12);
            $speadsheet->getActiveSheet()->getColumnDimension('M')->setWidth(12);
            $speadsheet->getActiveSheet()->getColumnDimension('N')->setWidth(12);
            $speadsheet->getActiveSheet()->getColumnDimension('O')->setWidth(12);
            $speadsheet->getActiveSheet()->getColumnDimension('P')->setWidth(12);
            $speadsheet->getActiveSheet()->getColumnDimension('Q')->setWidth(12);
            $speadsheet->getActiveSheet()->getColumnDimension('R')->setWidth(12);
            $speadsheet->getActiveSheet()->getColumnDimension('S')->setWidth(12);
            $speadsheet->getActiveSheet()->getColumnDimension('T')->setWidth(12);
            $speadsheet->getActiveSheet()->getColumnDimension('U')->setWidth(12);
            $speadsheet->getActiveSheet()->getColumnDimension('V')->setWidth(12);
            $speadsheet->getActiveSheet()->getColumnDimension('W')->setWidth(12);
            $speadsheet->getActiveSheet()->getColumnDimension('X')->setWidth(12);
            $speadsheet->getActiveSheet()->getColumnDimension('Y')->setWidth(12);
            $speadsheet->getActiveSheet()->getColumnDimension('Z')->setWidth(12);
            $speadsheet->getActiveSheet()->getColumnDimension('AA')->setWidth(12);
            $speadsheet->getActiveSheet()->getColumnDimension('AB')->setWidth(12);
            $speadsheet->getActiveSheet()->getColumnDimension('AC')->setWidth(12);
            $speadsheet->getActiveSheet()->getColumnDimension('AD')->setWidth(12);
            $speadsheet->getActiveSheet()->getColumnDimension('AE')->setWidth(12);
            $speadsheet->getActiveSheet()->getColumnDimension('AF')->setWidth(12);
            $speadsheet->getActiveSheet()->getColumnDimension('AG')->setWidth(12);
            $speadsheet->getActiveSheet()->getColumnDimension('AH')->setWidth(15);
            $title = date('Y-m-d h:i:s');

            $row = 1;
            $col = 1;
            /*col = 33*/
            $sheet->mergeCells("A1:L1");
            $sheet->setCellValue('A1','Hayvon kasalliklari tashxisi bo`yicha o`tkazilgan tekshiruvlar');
            $sheet->mergeCells("A2:D2");
            $sheet->mergeCells("C2:D2");
            $sheet->mergeCells("E2:L2");
            $sheet->mergeCells("AH3:AH5");
            $sheet->setCellValue('AH3','Tashkilot nomi');
            $sheet->setCellValue("A2",date('d.m.Y',strtotime($model->date_to)).' - '.date('d.m.Y',strtotime($model->date_do)));
//            $sheet->setCellValue('A2',Organizations::findOne(Yii::$app->user->identity->empPosts->org_id)->NAME_FULL);

            $sheet->mergeCells("M1:O1");
            $sheet->setCellValue('M1','4vet hisoboti');
            $sheet->mergeCells("M2:O2");
            $sheet->setCellValue('M2',date('Y-m-d h:i:s'));

            $sheet->mergeCells("A3:A5");

            $sheet->mergeCells("B3:B5");
            $sheet->setCellValue('B3','Kasallik, hayvon nomi');
            $sheet->mergeCells("C3:C5");
            $sheet->setCellValue('C3','Kod');
            $sheet->mergeCells("D3:D5");
            $sheet->setCellValue('D3','Materiallar soni');
            $sheet->setCellValue('A3','');
            $sheet->mergeCells("E3:AE3");
            $sheet->setCellValue('E3','Tekshiruv natijalari');

            $sheet->mergeCells("AF3:AF5");
            $sheet->setCellValue('AF3','Musbat natijalar');

            $sheet->mergeCells("AG3:AG5");
            $sheet->setCellValue('AG3','Tekshiruvlar soni');

            $sheet->mergeCells("E4:E5");
            $sheet->setCellValue('E4','Patonomiya');

            $sheet->mergeCells("F4:F5");
            $sheet->setCellValue('F4','Orgonalepika');

            $sheet->mergeCells("G4:H4");
            $sheet->setCellValue('G4','Mikroskopiya');
            $sheet->setCellValue('G5','Nur');
            $sheet->setCellValue('H5','Lyuminesent');

            $sheet->mergeCells("I4:I5");
            $sheet->setCellValue('I4','Bakteriologik');

            $sheet->mergeCells("J4:K5");
            $sheet->setCellValue('J4','Virusologik');
            $sheet->setCellValue('J5','TE KE');
            $sheet->setCellValue('K5','XM KK');

            $sheet->mergeCells("L4:L5");
            $sheet->setCellValue('L4','Biologik');

            $sheet->mergeCells("M4:Z4");
            $sheet->setCellValue('M4','Serologik');
            $sheet->setCellValue('M5','RA KR');
            $sheet->setCellValue('N5','RSK');
            $sheet->setCellValue('O5','RDSK');
            $sheet->setCellValue('P5','RBP');
            $sheet->setCellValue('Q5','RMA');
            $sheet->setCellValue('R5','RP,RDP');
            $sheet->setCellValue('S5','RN');
            $sheet->setCellValue('T5','RNGA');
            $sheet->setCellValue('U5','RKGA');
            $sheet->setCellValue('V5','RGA');
            $sheet->setCellValue('X5','IFA');
            $sheet->setCellValue('Y5','IXLA');
            $sheet->setCellValue('Z5','Boshqa');

            $sheet->mergeCells("AA4:AA5");
            $sheet->mergeCells("AB4:AB5");
            $sheet->mergeCells("AC4:AC5");
            $sheet->mergeCells("AD4:AD5");
            $sheet->mergeCells("AE4:AE5");
            $sheet->mergeCells("AF4:AF5");
            $sheet->setCellValue('AA4','PSR');
            $sheet->setCellValue('AB4','Gistologiya');
            $sheet->setCellValue('AC4','Gemotologiya');
            $sheet->setCellValue('AD4','Koprologik');
            $sheet->setCellValue('AE4','Kimyoviy');
            $sheet->setCellValue('AF4','Biokimyoviy');

            $sheet->setCellValue('A6','');
            $sheet->setCellValue('B6','A');
            $sheet->setCellValue('C6','B');
            $sheet->setCellValue('D6','1');
            $sheet->setCellValue('E6','2');
            $sheet->setCellValue('F6','3');
            $sheet->setCellValue('G6','4');
            $sheet->setCellValue('H6','5');
            $sheet->setCellValue('I6','6');
            $sheet->setCellValue('J6','7');
            $sheet->setCellValue('K6','8');
            $sheet->setCellValue('L6','9');
            $sheet->setCellValue('M6','10');
            $sheet->setCellValue('N6','11');
            $sheet->setCellValue('O6','12');
            $sheet->setCellValue('P6','13');
            $sheet->setCellValue('Q6','14');
            $sheet->setCellValue('R6','15');
            $sheet->setCellValue('S6','16');
            $sheet->setCellValue('T6','17');
            $sheet->setCellValue('U6','18');
            $sheet->setCellValue('V6','19');
            $sheet->setCellValue('W6','20');
            $sheet->setCellValue('X6','21');
            $sheet->setCellValue('Y6','22');
            $sheet->setCellValue('Z6','23');
            $sheet->setCellValue('AA6','24');
            $sheet->setCellValue('AB6','25');
            $sheet->setCellValue('AC6','26');
            $sheet->setCellValue('AD6','27');
            $sheet->setCellValue('AE6','28');
            $sheet->setCellValue('AF6','29');
            $sheet->setCellValue('AG6','30');
            $sheet->setCellValue('AH6','31');

            $lg = 'uz';
            $key = 0;
            $models = $res;
            $row = 6;
            foreach ($models as $result) {
                $sample = $result->sample;
                $row++;
                $col = 1;
                $key++;
                $soat=function($model){
                    return Soato::Full($model->soato_id);
                };
                $ml = RouteSert::findOne(['sample_id'=>$sample->id]);
                $sheet->setCellValueExplicitByColumnAndRow($col++, $row, $key, DataType::TYPE_STRING);
                $sheet->setCellValueExplicitByColumnAndRow($col++, $row, $sample->suspectedDisease->vet4 . $sample->animal->type->vet4.'-'.$sample->suspectedDisease->{'name_uz'}.', '.$sample->animal->type->{'name_uz'}, DataType::TYPE_STRING);
                $sheet->setCellValueExplicitByColumnAndRow($col++, $row, $ml->vet4.', '.\common\models\SampleTypes::findOne(['vet4'=>substr($ml->vet4,5,3)])->{'name_'.$lg}, DataType::TYPE_STRING);
                $sheet->setCellValueExplicitByColumnAndRow($col++, $row, '1', DataType::TYPE_STRING);
                $sheet->setCellValueExplicitByColumnAndRow($col++, $row, $result->patonomiya, DataType::TYPE_STRING);
                $sheet->setCellValueExplicitByColumnAndRow($col++, $row, $result->organoleptika, DataType::TYPE_STRING);
                $sheet->setCellValueExplicitByColumnAndRow($col++, $row, $result->mikroskopiya_nurli, DataType::TYPE_STRING);
                $sheet->setCellValueExplicitByColumnAndRow($col++, $row, $result->mikroskopiya_lyuminesent, DataType::TYPE_STRING);
                $sheet->setCellValueExplicitByColumnAndRow($col++, $row, $result->bakterilogik, DataType::TYPE_STRING);
                $sheet->setCellValueExplicitByColumnAndRow($col++, $row, $result->virusologik_TE_KE, DataType::TYPE_STRING);
                $sheet->setCellValueExplicitByColumnAndRow($col++, $row, $result->virusologik_XM_KK, DataType::TYPE_STRING);
                $sheet->setCellValueExplicitByColumnAndRow($col++, $row, $result->biologik, DataType::TYPE_STRING);
                $sheet->setCellValueExplicitByColumnAndRow($col++, $row, $result->RA_KR, DataType::TYPE_STRING);
                $sheet->setCellValueExplicitByColumnAndRow($col++, $row, $result->RSK, DataType::TYPE_STRING);
                $sheet->setCellValueExplicitByColumnAndRow($col++, $row, $result->RDSK, DataType::TYPE_STRING);
                $sheet->setCellValueExplicitByColumnAndRow($col++, $row, $result->RBP, DataType::TYPE_STRING);
                $sheet->setCellValueExplicitByColumnAndRow($col++, $row, $result->RMA, DataType::TYPE_STRING);
                $sheet->setCellValueExplicitByColumnAndRow($col++, $row, $result->RP_RDP, DataType::TYPE_STRING);
                $sheet->setCellValueExplicitByColumnAndRow($col++, $row, $result->RH, DataType::TYPE_STRING);
                $sheet->setCellValueExplicitByColumnAndRow($col++, $row, $result->RNGA, DataType::TYPE_STRING);
                $sheet->setCellValueExplicitByColumnAndRow($col++, $row, $result->RGKA, DataType::TYPE_STRING);
                $sheet->setCellValueExplicitByColumnAndRow($col++, $row, $result->RGA, DataType::TYPE_STRING);
                $sheet->setCellValueExplicitByColumnAndRow($col++, $row, $result->IFA, DataType::TYPE_STRING);
                $sheet->setCellValueExplicitByColumnAndRow($col++, $row, $result->IXLA, DataType::TYPE_STRING);
                $sheet->setCellValueExplicitByColumnAndRow($col++, $row, $result->boshqa_serologiya, DataType::TYPE_STRING);
                $sheet->setCellValueExplicitByColumnAndRow($col++, $row, $result->PSR, DataType::TYPE_STRING);
                $sheet->setCellValueExplicitByColumnAndRow($col++, $row, $result->gistologiya, DataType::TYPE_STRING);
                $sheet->setCellValueExplicitByColumnAndRow($col++, $row, $result->gemotologiya, DataType::TYPE_STRING);
                $sheet->setCellValueExplicitByColumnAndRow($col++, $row, $result->koprologiya, DataType::TYPE_STRING);
                $sheet->setCellValueExplicitByColumnAndRow($col++, $row, $result->kimyoviy, DataType::TYPE_STRING);
                $sheet->setCellValueExplicitByColumnAndRow($col++, $row, $result->biokimyoviy, DataType::TYPE_STRING);

                $cnt = 0;
                $sum = 0;
                $n=0;
                foreach ($result->getAttributes() as $keys=>$item){
                    $n++;
                    if($n>17){
                        if($item != 0){
                            $cnt++;
                            $sum += $item;
                        }
                    }
                }
                $sheet->setCellValueExplicitByColumnAndRow($col++, $row, $result->ads, DataType::TYPE_STRING);
                $sheet->setCellValueExplicitByColumnAndRow($col++, $row, $cnt, DataType::TYPE_STRING);
                $sheet->setCellValueExplicitByColumnAndRow($col++, $row, $result->org->NAME_FULL, DataType::TYPE_STRING);

            }
            $name = 'ExcelReport-' . Yii::$app->formatter->asDatetime(time(), 'php:d_m_Y_h_i_s') . '.xlsx';
            $writer = new Xlsx($speadsheet);
            $dir = Yii::getAlias('@tmp/excel');
            if (!is_dir($dir)) {
                FileHelper::createDirectory($dir, 0777);
            }
            $fileName = $dir . DIRECTORY_SEPARATOR . $name;
            $writer->save($fileName);
            return Yii::$app->response->sendFile($fileName);
        }
        return $this->render('vet4',['model'=>$model,'type'=>'animal']);
    }

    public function actionReportvet4food(){

        $model = new Vet4();
        $model->type = 0;
        if($model->load(Yii::$app->request->post())){


            $speadsheet = new Spreadsheet();

            $sheet = $speadsheet->getActiveSheet();
            $speadsheet->getActiveSheet()->getColumnDimension('A')->setWidth(10);
            $speadsheet->getActiveSheet()->getColumnDimension('B')->setWidth(30);
            $speadsheet->getActiveSheet()->getColumnDimension('C')->setWidth(30);
            $speadsheet->getActiveSheet()->getColumnDimension('D')->setWidth(12);
            $speadsheet->getActiveSheet()->getColumnDimension('E')->setWidth(12);
            $speadsheet->getActiveSheet()->getColumnDimension('F')->setWidth(12);
            $speadsheet->getActiveSheet()->getColumnDimension('G')->setWidth(12);
            $speadsheet->getActiveSheet()->getColumnDimension('H')->setWidth(12);
            $speadsheet->getActiveSheet()->getColumnDimension('I')->setWidth(12);
            $speadsheet->getActiveSheet()->getColumnDimension('J')->setWidth(12);
            $speadsheet->getActiveSheet()->getColumnDimension('K')->setWidth(12);
            $speadsheet->getActiveSheet()->getColumnDimension('L')->setWidth(12);
            $speadsheet->getActiveSheet()->getColumnDimension('M')->setWidth(12);
            $speadsheet->getActiveSheet()->getColumnDimension('N')->setWidth(15);

            $title = date('Y-m-d h:i:s');
            $row = 1;
            $col = 1;
            $sheet->mergeCells("A1:L1");
            $sheet->setCellValue('A1','Oziq-ovqat havfsizligi ekspertizasi bo`yicha o`tkazilgan tekshiruvlar');
            $sheet->mergeCells("A2:D2");
            $sheet->mergeCells("C2:D2");
            $sheet->mergeCells("E2:L2");
            $sheet->setCellValue("A2",date('d.m.Y',strtotime($model->date_to)).' - '.date('d.m.Y',strtotime($model->date_do)));
//            $sheet->setCellValue('A2',Organizations::findOne(Yii::$app->user->identity->empPosts->org_id)->NAME_FULL);

            $sheet->mergeCells("M1:O1");
            $sheet->setCellValue('M1','4vet hisoboti');
            $sheet->mergeCells("M2:O2");
            $sheet->setCellValue('M2',date('Y-m-d h:i:s'));

            $sheet->mergeCells("A3:A4");
            $sheet->setCellValue('A3','№');

            $sheet->mergeCells("B3:B4");
            $sheet->setCellValue('B3','Mahsulot guruhi');

            $sheet->mergeCells("C3:C4");
            $sheet->setCellValue('C3','Hayvon mahsuloti');

            $sheet->mergeCells("D3:D4");
            $sheet->setCellValue('D3','Namuna soni');

            $sheet->mergeCells("E3:E4");
            $sheet->setCellValue('E3','Namunadagi mahsulot miqdori');

            $sheet->mergeCells("F3:F4");
            $sheet->setCellValue('F3','Partiya miqdori');

            $sheet->mergeCells("G3:K3");
            $sheet->setCellValue('G3','Laboratoriya tekshiruvi');

            $sheet->setCellValue('G4','Organoleptik');
            $sheet->setCellValue('H4','Mikroskopik');
            $sheet->setCellValue('I4','Mikrobiologik');
            $sheet->setCellValue('J4','Kimyoviy');
            $sheet->setCellValue('K4','Radiologik');

            $sheet->mergeCells("L3:L4");
            $sheet->setCellValue('L3','Musbat natijalar');

            $sheet->mergeCells("M3:M4");
            $sheet->setCellValue('M3','Tekshiruvlar soni');
            $sheet->mergeCells("N3:N4");
            $sheet->setCellValue('N3','Tashkilot nomi');


            $sheet->setCellValue('A5','');
            $sheet->setCellValue('B5','A');
            $sheet->setCellValue('C5','B');
            $sheet->setCellValue('D5','1');
            $sheet->setCellValue('E5','2');
            $sheet->setCellValue('F5','3');
            $sheet->setCellValue('G5','4');
            $sheet->setCellValue('H5','5');
            $sheet->setCellValue('I5','6');
            $sheet->setCellValue('J5','7');
            $sheet->setCellValue('K5','8');
            $sheet->setCellValue('L5','9');
            $sheet->setCellValue('M5','10');
            $sheet->setCellValue('N5','11');


            $sql = 1;
            if($model->type == 0){
                $code = "17".Yii::$app->user->identity->empPosts->org->soato0->region_id;

                if($model->district > 0){
                    $code .= $model->district;
                }
                $sql = 'org_id in (select id from organizations where soato like "'.$code.'%")';

            }else{
                if($model->org > 0){
                    $sql = "org_id={$model->org}";
                }
            }
            $res = ResultFood::find()
                ->where('end_date is not null')
                ->andWhere(['>=','end_date',$model->date_to])
                ->andWhere(['<=','end_date',$model->date_do])
                ->andWhere($sql)
                ->all();


            $lg = 'uz';
            $key = 0;
            $models = $res;
            $row = 5;
            foreach ($models as $result) {
                $samp = $result->sample;
                $row++;
                $col = 1;
                $key++;
                $soat=function($model){
                    return Soato::Full($model->soato_id);
                };
                $anim = "-";
                if($samp->food->animal_type_id == 'XX'){
                    $anim = "XX";
                }elseif(!$samp->food->animal_type_id){
                    $a = Animaltype::find()->where(['vet4'=>$samp->food->animal_type_id])->all();
                    $anim = "";
                    foreach ($a as $i){
                        $anim .= $i->name_uz.', ';
                    }
                }else{
                    $anim = "-";
                }
                $sheet->setCellValueExplicitByColumnAndRow($col++, $row, $key, DataType::TYPE_STRING);
                $sheet->setCellValueExplicitByColumnAndRow($col++, $row, $samp->category->{'name_'.$lg}.'-'.$samp->food->{'name_'.$lg}, DataType::TYPE_STRING);
                $sheet->setCellValueExplicitByColumnAndRow($col++, $row, $anim, DataType::TYPE_STRING);
                $sheet->setCellValueExplicitByColumnAndRow($col++, $row, '1', DataType::TYPE_STRING);
                $sheet->setCellValueExplicitByColumnAndRow($col++, $row, $samp->count, DataType::TYPE_STRING);
                $sheet->setCellValueExplicitByColumnAndRow($col++, $row, $samp->total_amount, DataType::TYPE_STRING);
                $sheet->setCellValueExplicitByColumnAndRow($col++, $row, $result->organoleptik, DataType::TYPE_STRING);
                $sheet->setCellValueExplicitByColumnAndRow($col++, $row, $result->mikroskopik, DataType::TYPE_STRING);
                $sheet->setCellValueExplicitByColumnAndRow($col++, $row, $result->mikrobiologik, DataType::TYPE_STRING);
                $sheet->setCellValueExplicitByColumnAndRow($col++, $row, $result->kimyoviy, DataType::TYPE_STRING);
                $sheet->setCellValueExplicitByColumnAndRow($col++, $row, $result->radiologik, DataType::TYPE_STRING);
                $sheet->setCellValueExplicitByColumnAndRow($col++, $row, $result->ads, DataType::TYPE_STRING);

                $cnt = 0;
                if($result->organoleptik){$cnt++;}
                if($result->mikroskopik){$cnt++;}
                if($result->mikrobiologik){$cnt++;}
                if($result->kimyoviy){$cnt++;}
                if($result->radiologik){$cnt++;}


                $sheet->setCellValueExplicitByColumnAndRow($col++, $row, $cnt, DataType::TYPE_STRING);

                $sheet->setCellValueExplicitByColumnAndRow($col++, $row, $result->org->NAME_FULL, DataType::TYPE_STRING);

            }

            $name = 'ExcelReport-' . Yii::$app->formatter->asDatetime(time(), 'php:d_m_Y_h_i_s') . '.xlsx';
            $writer = new Xlsx($speadsheet);
            $dir = Yii::getAlias('@tmp/excel');
            if (!is_dir($dir)) {
                FileHelper::createDirectory($dir, 0777);
            }
            $fileName = $dir . DIRECTORY_SEPARATOR . $name;
            $writer->save($fileName);
            return Yii::$app->response->sendFile($fileName);

        }
        return $this->render('vet4',['model'=>$model,'type'=>'food']);
    }



}
